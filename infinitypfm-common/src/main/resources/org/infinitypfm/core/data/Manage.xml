<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (c) 2005-2011 Wayne Gray All rights reserved This file is 
	part of Infinity PFM. Infinity PFM is free software: you can redistribute 
	it and/or modify it under the terms of the GNU General Public License as 
	published by the Free Software Foundation, either version 3 of the License, 
	or (at your option) any later version. Infinity PFM is distributed in the 
	hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
	GNU General Public License for more details. You should have received a copy 
	of the GNU General Public License along with Infinity PFM. If not, see <http://www.gnu.org/licenses/>. -->


<!DOCTYPE mapper 
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Manage">

	<insert id="BackupDatabase" parameterType="java.lang.String">
		BACKUP DATABASE TO
		#{value} BLOCKING
   </insert>

	<update id="createTableAccountTypes">
		CREATE CACHED TABLE AccountTypes
		(
		ActTypeID INT
		GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		ActTypeName
		VARCHAR(50),
		UNIQUE(ActTypeName),
		UNIQUE(ActTypeID)
		)
</update>


	<update id="createTableAccounts">
		CREATE CACHED TABLE Accounts
		(
		ActID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		ActTypeID INT,
		ActName VARCHAR(100),
		ActNumber VARCHAR(50),
		ActBalance BIGINT,
		CurrencyID INT,
		UNIQUE (ActName),
		UNIQUE (ActID)
		)
	</update>

	<update id="createTableTransactions">
		CREATE CACHED TABLE Transactions
		(
		TranID BIGINT
		GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		ActID INT,
		TranDate
		DATETIME,
		TranMemo VARCHAR(500),
		TranAmount BIGINT,
		TranKey VARCHAR(255),
		UNIQUE(TranID)
		)
	</update>

	<update id="createTableMonthlyBalance">
		CREATE CACHED TABLE MonthlyBalance
		(
		ActID INT,
		Yr INT,
		Mth INT,
		ActBalance BIGINT,
		UNIQUE(ActId, Yr, Mth)
		)
	</update>

	<update id="createTableBudget">
		CREATE CACHED TABLE Budget
		(
		BudgetID INT
		GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		BudgetName
		VARCHAR(100),
		UNIQUE(BudgetName),
		UNIQUE(BudgetID)
		)
	</update>

	<update id="createTableBudgetDetail">
		CREATE CACHED TABLE BudgetDetail
		(
		BudgetID INT,
		ActID INT,
		Mth INT,
		Amount BIGINT,
		UNIQUE(BudgetID, ActID, Mth)
		) 
	</update>

	<update id="createTableAppSettings">
		CREATE CACHED TABLE AppSettings
		(
		AppVersion VARCHAR(15),
		DefaultCurrencyID INT DEFAULT 0,
		CurrencyPrecision INT DEFAULT 2,
		ReportsInBrowswer INT DEFAULT 0,
		ConsoleDefaultOpen INT DEFAULT 0,
		WalletEnabled INT DEFAULT 0,
		SpendPassword VARCHAR(100),
		DefaultBsvCurrencyMethod VARCHAR(50),
		DefaultBsvCurrencyID INT DEFAULT 0,
		EmailAddress VARCHAR(50),
		WalletUser VARCHAR(50),
		WalletToken VARCHAR(500),
		WalletId VARCHAR (50),
		BookmarksUrl VARCHAR(500),
		ReportPath VARCHAR(500)
		) 
	</update>

	<update id="createTableAccountTemplates">
		CREATE CACHED TABLE AccountTemplates
		(
		ActTypeID INT,
		ActName VARCHAR(100),
		UNIQUE(ActTypeID, ActName)
		)
  </update>

	<update id="createTableImportHistory">
		CREATE CACHED TABLE ImportHistory
		(
		ActID INT,
		Memo VARCHAR(500),
		UNIQUE(ActID, Memo)
		)
  </update>

	<update id="createTableImportRules">
		CREATE CACHED TABLE ImportRules
		(
		ActID INT,
		Keyword VARCHAR(100),
		RuleName VARCHAR(25),
		UNIQUE (ActID, Keyword, RuleName)
		)
  </update>

	<update id="createTableRecurHeader">
		CREATE CACHED TABLE RecurHeader
		(
		RecurID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		Memo VARCHAR(500),
		ActID INT,
		OffsetID INT,
		NextRunDate DATETIME,
		Amount BIGINT,
		FrequencyID INT,
		UNIQUE(RecurID)
		)
	</update>

	<update id="createTableRecurDetail">
		CREATE CACHED TABLE RecurDetail
		(
		RecurTranID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		RecurID INT,
		TranDate DATETIME,
		UNIQUE(RecurTranID)
		)
	</update>

	<update id="createTableCurrencies">
		CREATE CACHED TABLE Currencies
		(
		CurrencyID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		Name VARCHAR(50),
		IsoCode VARCHAR(5),
		ExchRate VARCHAR(25),
		LastUpdate DATETIME,
		CurrencyPrecision INT DEFAULT 2,
		UNIQUE (IsoCode),
		UNIQUE (CurrencyID)
		)
	 </update>

	<update id="createTableCurrencyMethods">
		CREATE CACHED TABLE CurrencyMethods
		(
		CurrencyID INT,
		MethodName VARCHAR(50),
		MethodUrl VARCHAR(500),
		MethodPath VARCHAR(500),
		UNIQUE(CurrencyID, MethodName)
		)
	</update>

	<update id="createTableTrades">
		CREATE CACHED TABLE Trades
		(
		TranID BIGINT,
		CurrencyID INT,
		TranDate DATETIME,
		Amount BIGINT,
		UNIQUE (TranID, CurrencyID, TranDate)
		)
	</update>

	<update id="createTableTrades2">
		CREATE CACHED TABLE Trades2
		(
		TranID BIGINT,
		FromCurrencyID INT,
		ToCurrencyID INT,
		TranDate DATETIME,
		FromAmount BIGINT,
		ToAmount BIGINT,
		BasisFifo BIGINT,
		BasisLifo BIGINT,
		UNIQUE (TranID)
		)
	</update>

	<update id="createTableBasis">
		CREATE CACHED TABLE Basis
		(
		AquireCurrencyID INT,
		AquireDate DATETIME,
		QtyFifo BIGINT,
		QtyLifo BIGINT,
		Cost BIGINT,
		CostCurrencyId INT
		)
	</update>

	<update id="createTableConnectors">
		CREATE CACHED TABLE Connectors
		(
		ConnectorID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		ConnectorName VARCHAR(100),
		MailServer VARCHAR(100),
		MailBox VARCHAR(100),
		MailPassword VARCHAR(100),
		MailSubject VARCHAR(200),
		MailBodyPrefix VARCHAR(300),
		MailBodySuffix VARCHAR(300),
		UNIQUE (ConnectorName)
		)
	</update>

	<update id="createTableImportDef">
		CREATE CACHED TABLE ImportDef
		(
		ImportID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		ImportName VARCHAR(100),
		ImportType VARCHAR(100),
		DateField VARCHAR(100),
		DateFormat VARCHAR(50),
		MemoField VARCHAR(100),
		AmountField VARCHAR(100),
		UNIQUE (ImportName)
		)
	</update>

	<update id="createTablePlans">
		CREATE CACHED TABLE Plans
		(
		PLanID INT
		GENERATED BY DEFAULT AS IDENTITY (START WITH 0),
		PlanName VARCHAR(50),
		StarBalance BIGINT,
		StartAge INT,
		UNIQUE(PlanID),
		UNIQUE(PlanName)
		)
</update>

	<update id="createFK2RecurDetail">
		ALTER TABLE RecurDetail ADD
		CONSTRAINT
		FK_RecurDetail_RecurHeader
		FOREIGN KEY (RecurID) REFERENCES RecurHeader
		(RecurID)
	 </update>
	
	<update id="createFKTransactions">
		ALTER TABLE Transactions ADD
		CONSTRAINT
		FK_Transactions_Accounts
		FOREIGN KEY (ActID) REFERENCES Accounts
		(ActID)
	 </update>

	<update id="createFKAccounts">
		ALTER TABLE Accounts ADD
		CONSTRAINT
		FK_Accounts_AccountTypes
		FOREIGN KEY (ActTypeID) REFERENCES
		AccountTypes (ActTypeID)
	 </update>

	<update id="createFKTrades1">
		ALTER TABLE Trades ADD
		CONSTRAINT
		FK_Trades_Currencies
		FOREIGN KEY (CurrencyID) REFERENCES Currencies (CurrencyID)
	 </update>
	 
	 <update id="createFKTrades2">
		ALTER TABLE Trades ADD
		CONSTRAINT
		FK_Trades_Transactions
		FOREIGN KEY (TranID) REFERENCES Transactions (TranID)
	 </update>

	<update id="createFKTrades21">
		ALTER TABLE Trades2 ADD
		CONSTRAINT
		FK_Trades2_Currencies_1
		FOREIGN KEY (FromCurrencyID) REFERENCES Currencies (CurrencyID)
	 </update>

	<update id="createFKTrades22">
		ALTER TABLE Trades2 ADD
		CONSTRAINT
		FK_Trades2_Currencies_2
		FOREIGN KEY (ToCurrencyID) REFERENCES Currencies (CurrencyID)
	 </update>
	 
	 <update id="createFKTrades23">
		ALTER TABLE Trades2 ADD
		CONSTRAINT
		FK_Trades2_Transactions
		FOREIGN KEY (TranID) REFERENCES Transactions (TranID)
	 </update>

	<update id="createFKBasis1">
		ALTER TABLE Basis ADD
		CONSTRAINT
		FK_Basis_Currencies_1
		FOREIGN KEY (AquireCurrencyID) REFERENCES Currencies (CurrencyID)
	 </update>

	<update id="createFKBasis2">
		ALTER TABLE Basis ADD
		CONSTRAINT
		FK_Basis_Currencies_2
		FOREIGN KEY (CostCurrencyID) REFERENCES Currencies (CurrencyID)
	 </update>

	<update id="createFKBudgetDetail">
		ALTER TABLE BudgetDetail ADD
		CONSTRAINT
		FK_BudgetDetail_Budget
		FOREIGN KEY (BudgetID) REFERENCES Budget
		(BudgetID)
	 </update>

	<update id="createFK2BudgetDetail">
		ALTER TABLE BudgetDetail ADD
		CONSTRAINT
		FK_BudgetDetail_ActID
		FOREIGN KEY (ActID) REFERENCES Accounts (ActID)
	 </update>

	<update id="createFKMonthlyBalance">
		ALTER TABLE MonthlyBalance ADD
		CONSTRAINT
		FK_MonthlyBalance_Accounts
		FOREIGN KEY (ActID) REFERENCES Accounts
		(ActID)
	 </update>
	 
	 <update id="createFKCurrencies">
		ALTER TABLE AppSettings ADD
		CONSTRAINT FK_AppSettings_Currencies
		FOREIGN KEY (DefaultCurrencyID) REFERENCES Currencies (CurrencyID);
  	</update>

	 <update id="createFKCurrencies2">
		ALTER TABLE Accounts ADD
		CONSTRAINT FK_Account_Currencies
		FOREIGN KEY (CurrencyID) REFERENCES Currencies (CurrencyID);
  	</update>
  	
  	<update id="createFKCurrencyMethods">
		ALTER TABLE CurrencyMethods ADD
		CONSTRAINT FK_CurrencyMethods_Currencies
		FOREIGN KEY (CurrencyID) REFERENCES Currencies (CurrencyID);
  	</update>

	<update id="createFKImportRules">
		ALTER TABLE ImportRules ADD
		CONSTRAINT FK_ImportRules_Account
		FOREIGN KEY (ActID) REFERENCES Accounts (ActID)
	 </update>

	<insert id="addAppSetting" parameterType="java.lang.String">
		INSERT INTO
		AppSettings (AppVersion) VALUES (#{value})
 	</insert>

	<insert id="addAccountType" parameterType="java.lang.String">
		INSERT INTO
		AccountTypes (ActTypeName) VALUES(#{value})
 	</insert>
 	
	<insert id="addAccountTemplate" parameterType="org.infinitypfm.core.data.Account">
		INSERT INTO
		AccountTemplates(ActName, ActTypeID) SELECT #{actName} AS ActName,
		AccountTYpes.ACTTYPEID FROM AccountTypes WHERE ACTTYPENAME =
		#{actTypeName}
 	</insert>

	<insert id="addCurrency" parameterType="org.infinitypfm.core.data.Currency">
		INSERT INTO Currencies (Name, IsoCode, ExchRate, LastUpdate)
		VALUES (#{currencyName}, #{isoName}, #{exchangeRate}, CURTIME ());
 	</insert>
	
	<insert id="addCurrencyWithPrecision" parameterType="org.infinitypfm.core.data.Currency">
		INSERT INTO Currencies (Name, IsoCode, ExchRate, LastUpdate, CurrencyPrecision)
		VALUES (#{currencyName}, #{isoName}, #{exchangeRate}, CURTIME (), #{currencyPrecision});
 	</insert>

	<select id="tableExists" parameterType="java.lang.String"
		resultType="java.lang.Integer" flushCache="true">
		SELECT count(*) AS foundCount FROM SYSTEM_TABLES WHERE
		TABLE_NAME = #{value}
	</select>

	<update id="akTransactions">
	 CREATE UNIQUE INDEX ak_transactions ON transactions (ACTID,TRANDATE,TRANMEMO,TRANAMOUNT)
	</update>
	
	<insert id="shutdown" parameterType="java.lang.String">
     SHUTDOWN;
   </insert>
   
</mapper>
 
